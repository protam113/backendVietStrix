import { Request, Response } from "express";
import Blogs from "../models/Blog";
import BlogCategory from "../models/BlogCategory";
import slugify from "slugify";

export const createBlog = async (req: Request, res: Response): Promise<void> => {
    try {
        const { title, content, description, link, categories } = req.body;

        // Ki·ªÉm tra danh m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
        const existingCategories = await BlogCategory.find({ _id: { $in: categories } });
        if (existingCategories.length !== categories.length) {
            res.status(400).json({ message: "One or more categories not found" });
            return;
        }

        // T·∫°o slug t·ª´ title
        const slug = slugify(title, { lower: true });

        // Ki·ªÉm tra slug c√≥ tr√πng kh√¥ng
        const existingDoc = await Blogs.findOne({ slug });
        if (existingDoc) {
            res.status(400).json({ message: "Slug already exists" });
            return;
        }

        // T·∫°o Docs m·ªõi
        const newBlog = new Blogs({ title, slug, content, description, link, categories });
        await newBlog.save();

        res.status(201).json(newBlog);
    } catch (error: any) {
        res.status(500).json({ error: error.message });
    }
};

// üî• API l·∫•y danh s√°ch Docs c√≥ l·ªçc theo Category + Pagination
export const getAllBlogs = async (req: Request, res: Response): Promise<void> => {
    try {
        let { category, page = "1", pageSize = "10" } = req.query;

        // Chuy·ªÉn ƒë·ªïi page & pageSize sang s·ªë nguy√™n
        const pageNum = Math.max(parseInt(page as string), 1);
        const limit = Math.max(parseInt(pageSize as string), 1);
        const skip = (pageNum - 1) * limit;

        // üî• L·ªçc theo categories (c√≥ th·ªÉ l·ªçc nhi·ªÅu category)
        let filter = {};
        if (category) {
            const categoryArray = (category as string).split(","); // Cho ph√©p l·ªçc theo nhi·ªÅu category
            filter = { categories: { $in: categoryArray } };
        }

        // üî• Query MongoDB
        const blogs = await Blogs.find(filter)
            .populate("categories", "name slug") // L·∫•y th√™m th√¥ng tin categories
            .skip(skip)
            .limit(limit);

        // üî• ƒê·∫øm t·ªïng s·ªë docs
        const totalBlogs = await Blogs.countDocuments(filter);
        const totalPages = Math.ceil(totalBlogs / limit);

        // ‚úÖ Tr·∫£ v·ªÅ d·ªØ li·ªáu + metadata pagination
        res.status(200).json({
            data: blogs,
            pagination: {
                currentPage: pageNum,
                pageSize: limit,
                totalPages,
                totalBlogs,
            },
        });
    } catch (error: any) {
        res.status(500).json({ error: error.message });
    }
};


export const getOneBlog = async (req: Request, res: Response): Promise<void> => {
    try {
        const { slug } = req.params;

        const blog = await Blogs.findOne({ slug }).populate("blogs", "name slug");

        if (!blog) {
            res.status(404).json({ message: "Blog not found" });
            return;
        }

        res.status(200).json(blog);
    } catch (error: any) {
        res.status(500).json({ error: error.message });
    }
};

